---
title: "Git 基本操作②"
subtitle: "2023-MM-DD 牧野研 技術輪読会 `git`編"
format: revealjs
highlight-style: breeze
---


## 目次

1. 前回の復習

2. ローカルリポジトリの変更を手元に反映させる

3. あえて競合を起こしてそれを解決してみる

参考
: [過去の牧野研での `git` 講習資料](https://heavywatal.github.io/lectures/git2019makino.html)
: [`git` 公式リファレンス](https://git-scm.com/docs)


## 前回の復習: `git` を使い始める

1. `git` <img height="24" style="margin:0;" src="https://cdn.simpleicons.org/git"> をインストールする。

1. Github <img height="24" style="margin:0;" src="https://cdn.simpleicons.org/github"> に個人アカウントをつくる。

1. Gitの初期設定をする: `~/.gitconfig`

1. SSHの設定をする: `~/.ssh/`


## 前回の復習: 手元のプロジェクトをGitで管理する

1. 適当なディレクトリを作ってテキストファイルを新規作成する:

    ```sh
    mkdir new_project && cd new_project
    echo "Hello, world!" > sample.md
    ```

1. ローカルリポジトリをつくる:

    ```sh
    git init
    ```

1. ローカルリポジトリに `sample.md` をコミットする。

    最初は `git status` や `git log` で頻繁に確認すると安心。

    ```sh
    git status
    git add sample.md  # sample.mdをindexに登録
    git status
    git commit -m "Create sample.md" # コミットメッセージを添えてコミット
    git status
    ```


## 前回の復習: 手元のプロジェクトをGithubでも管理する

1. GitHubアカウントページの右上の “+” から “New repository” を選択する。

1. 適当なリポジトリ名（基本は手元と同じ）をつけて “Create repository” を押す。

1. 手順が表示されるので基本的にそれに従う:

    ```sh
    git remote add origin https://github.com/USER_NAME/new_project.git  # リモートリポジトリを紐づける
    git remote -v # ちゃんと紐づいたか確認
    git status
    git push -u origin main # リモートにpush
    git status
    ```

1. リポジトリのページを更新してsample.mdが見えるか確認する。


## 前回の復習: すでにあるリポジトリを手元に落としてくる

1. GitHub上の適当なリポジトリをひとつ選ぶ。 (e.g., https://github.com/ymat2/practice_git)

1. 右の方の <kbd style="background-color:#008000; color:#fff;"><>Code▼</kbd> ボタンを押す。

1. SSHではなくHTTPSを選択し、URLをコピー。

1. `git clone https://github.com/ymat2/practice-git.git`

1. 中身を眺めてみる:

     ```sh
     cd practice-git
     ls -al
     git log
     ```

<hr>

`clone` はどんな時に使う?
: 他人の作ったソフトウェアをインストールして使うとき
: 新しいPCで作業をするとき
: etc.


## リモートの変更を手元に取り寄せる

複数人で同じリポジトリを使う場合や、個人でも複数のマシンで開発する場合など、別のひと/マシンが `push` した変更を手元に取り寄せるという操作が必要になる。

`git fetch` + `git merge` や `git pull` といったコマンドで、リモートの変更を手元に反映させる。

![](image/push_and_pull.png){width="900"}


## リモートの変更を手元に取り寄せる

`git fetch`
: リモートリポジトリの変更をローカルリポジトリに取り込む。
: この時点では `.git/` 内だけが変更されているため、手元のファイルはそのまま。

`git merge`
: ローカルリポジトリの内容を、手元のファイルに反映する。

`git pull`
: `git fetch` と `git merge` を一緒に実行するコマンド。


## 実際にやってみる

1. リモートでの変更を再現するために、Githubページ上で `sample.md` を編集する。

     1. `sample.md` をクリック -> 右上のペンマーク 🖊 から編集画面に入る。

     2. "This line is edited online." など適当に編集して、右上の <kbd style="background-color:#008000; color:#fff;">Commit changes</kbd> を押す。

     3. 表示されるウィンドウはとりあえずそのままで <kbd style="background-color:#008000; color:#fff;">Commit changes</kbd>

     4. 変更されていることを確認する。

2. その変更をローカルリポジトリに取り寄せる:

    ```sh
    git fetch
    git status
    ```

3. 手元のファイルに反映する:

    ```sh
    git merge
    git status
    ```

🔰 練習: もう一度リモートで編集して `git pull` してみる。


## 手元でもファイルを変更していたらどうなるの??

「別のファイルの変更」や「同じファイルの別の箇所の変更」である場合、`git merge` は両方の変更を取り入れる。

:::: {.columns}

::: {.column width="50%"}
手元の変更:

```{.md code-line-numbers="true"}
## 第1章
私はネコである。

## 第2章
あなたもネコである。
```

↓

```{.md code-line-numbers="2"}
## 第1章
私はイヌである。

## 第2章
あなたもネコである。
```

:::

::: {.column width="50%"}
リモートの変更:

```{.md code-line-numbers="true"}
## 第1章
私はネコである。

## 第2章
あなたもネコである。
```

↓

```{.md code-line-numbers="5"}
## 第1章
私はネコである。

## 第2章
あなたもイヌである。
```

:::

::::

<div style="text-align:center;">
↓

`git fetch` + `git merge`

↓
</div>

```{.md code-line-numbers="true"}
## 第1章
私はイヌである。

## 第2章
あなたもイヌである。
```


## 手元でもファイルを変更していたらどうなるの??

「同じファイルの同じ箇所の変更」である場合、`conflict` が発生する。

:::: {.columns}

::: {.column width="50%"}
手元の変更:

```{.md code-line-numbers="true"}
## 第1章
私はネコである。

## 第2章
あなたもネコである。
```

↓

```{.md code-line-numbers="2"}
## 第1章
私はイヌである。

## 第2章
あなたもネコである。
```

:::

::: {.column width="50%"}
リモートの変更:

```{.md code-line-numbers="true"}
## 第1章
私はネコである。

## 第2章
あなたもネコである。
```

↓

```{.md code-line-numbers="2"}
## 第1章
私はサルである。

## 第2章
あなたもネコである。
```

:::

::::

<div style="text-align:center;">
↓

`git fetch` + `git merge`

↓
</div>

```sh
$ git merge
# Auto-merging sample.md
# CONFLICT (content): Merge conflict in sample.md
# Automatic merge failed; fix conflicts and then commit the result.
```


## conflictを解消する

`conflict` が生じたファイル( `sample.md` )を開いてみるとこんな風になっている。

```md
## 第1章
<<<<<<< HEAD
私はイヌである。
=======
私はサルである。
>>>>>>> refs/remotes/origin/main

## 第2章
あなたもネコである。
```

<br>

`=======` を挟んで、

- `<<<<<<< HEAD` は手元での変更

- `>>>>>>> refs/remotes/origin/main` はリモートからの変更

を示している。


## conflictを解消する

ファイルを編集して `conflict` を解消する。例えば:

```md
## 第1章
私はイヌであるし、サルでもある。

## 第2章
あなたもネコである。
```

<br>

この変更をコミットしてリモートにも反映する:

```sh
git add sample.md
git commit -m "Solve a conflict"
git push
```


## とにかく使ってみる

🔰 練習1: 先ほどつくった `sample.md` を編集して複数行の内容にする。できたらコミットしてプッシュ。

<br>

🔰 練習2: 手元とリモートで異なる行を編集する。`git fetch` してから `git merge` してみる。

- 手元: 編集したらコミット
- リモート: 編集したら<kbd style="background-color:#008000; color:#fff;">Commit changes</kbd>

<br>

🔰 練習3: 手元とリモートで同じ行に異なる編集をする。

- まずは手元ではコミットせずに `git fetch` してから `git merge` してみる。どんなメッセージが出る？
