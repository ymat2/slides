[
  {
    "objectID": "minicong/minicong.html#生物多様性の源は",
    "href": "minicong/minicong.html#生物多様性の源は",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "生物多様性の源は?",
    "text": "生物多様性の源は?\n現在の生物の多様性・複雑性は、単一の共通祖先に端を発する進化の歴史の中で形成されてきた。\n  https://en.wikipedia.org/wiki/"
  },
  {
    "objectID": "minicong/minicong.html#生物の進化とはなにか",
    "href": "minicong/minicong.html#生物の進化とはなにか",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "生物の「進化」とはなにか",
    "text": "生物の「進化」とはなにか\n生物の性質が、世代を経るにつれて変化すること。\n↓ ちょっとアバウトすぎる\n親から子へと受け継がれる情報が変化し、その変化がやがて集団中に広まっていくこと。\n↓ もう少し学術的にいうと\n親から子へ遺伝する情報に変異が生じ、集団中における頻度が変化すること。\n\nキリンの例: (こんなに単純ではないだろうけど)\n\nとある遺伝子に変異が生じた結果、首の長い個体が現れた。\n首の長い個体は高いところの葉っぱも食べることができて生存に有利。\n首の長い個体ばっか生き残った結果、キリンの首が長くなった。\n\n\n決して高いところの葉を食べようとして首を長くしたわけではない。"
  },
  {
    "objectID": "minicong/minicong.html#遺伝情報-遺伝子",
    "href": "minicong/minicong.html#遺伝情報-遺伝子",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "遺伝情報？ 遺伝子？",
    "text": "遺伝情報？ 遺伝子？\n\n遺伝情報(親から子へ伝わる情報)の実体\n\nDNAの配列 = DNAを構成する4種類の塩基(A, T, G, C)の並び\n\n遺伝子\n\nDNAのうち、タンパク質(体を形作る素材)をつくる領域\n\n\n https://theory.labster.com/"
  },
  {
    "objectID": "minicong/minicong.html#バイオインフォマティクスとは",
    "href": "minicong/minicong.html#バイオインフォマティクスとは",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "バイオインフォマティクスとは",
    "text": "バイオインフォマティクスとは\n生物の持つ膨大な情報(主に遺伝情報)を、コンピュータの力を借りて扱う学問。\n\nある生物の遺伝情報(A, T, G, Cの並び)はどうなっているのか\nある種と別の種の遺伝情報はどこが同じで、どこが違うのか\n遺伝情報はどう変わってきたのか、どう変わりつつあるのか\n\n\n\n\n本日は野良データ + Python + Linuxで、バイオインフォマティクスの一部を体感。"
  },
  {
    "objectID": "minicong/minicong.html#本日のお品書き",
    "href": "minicong/minicong.html#本日のお品書き",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "本日のお品書き",
    "text": "本日のお品書き\n野良データを使って、バイオインフォマティクスの解析の一部を体験してもらう。\nペットとしてお馴染みのイヌ( Canis lupus familiaris )と、オーストラリアに生息するイヌの近縁種であるディンゴ( Canis lupus dingo )のゲノムを、重複遺伝子の観点から比較する。\n \n\n- CONTENTS -\n\n重複遺伝子とは?\n種の環境適応と重複遺伝子\n重複遺伝子を調べるゲノミクス手法\nLet’s try on your computer!\n\n\nGithub: https://github.com/ymat2/minicong"
  },
  {
    "objectID": "minicong/minicong.html#重複遺伝子とは",
    "href": "minicong/minicong.html#重複遺伝子とは",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "重複遺伝子とは",
    "text": "重複遺伝子とは\nもともと1つだった遺伝子が、さまざまな要因（組換えのミス、トランスポゾンの転移、etc.）で2つ以上になること。"
  },
  {
    "objectID": "minicong/minicong.html#重複遺伝子は環境への適応に関与する",
    "href": "minicong/minicong.html#重複遺伝子は環境への適応に関与する",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "重複遺伝子は環境への適応に関与する",
    "text": "重複遺伝子は環境への適応に関与する"
  },
  {
    "objectID": "minicong/minicong.html#アミラーゼ遺伝子の数",
    "href": "minicong/minicong.html#アミラーゼ遺伝子の数",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "アミラーゼ遺伝子の数",
    "text": "アミラーゼ遺伝子の数\n\nアミラーゼはでんぷんを分解する消化酵素。いろんなものを食べるヒトは5つのアミラーゼ遺伝子をもつ。: AMY1A, AMY1B, AMY1C, AMY2A, AMY2B\n\n  左: αアミラーゼ　右: βアミラーゼ\n\n\nこれまでの話と絡めると、多様な食事を摂る環境ではアミラーゼ遺伝子の重複が有利に働いたと言える。\nでは、長く人間のペットとして生きてきたイヌと、野生に暮らすディンゴでは、どちらの方がアミラーゼ遺伝子を多く持つだろう？"
  },
  {
    "objectID": "minicong/minicong.html#重複遺伝子を調べるためのゲノミクス手法",
    "href": "minicong/minicong.html#重複遺伝子を調べるためのゲノミクス手法",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "重複遺伝子を調べるためのゲノミクス手法",
    "text": "重複遺伝子を調べるためのゲノミクス手法\n重複遺伝子どうしはもともとは1つの遺伝子（=同じ配列）なので、互いに似た配列を持つ。そこで、\n\nBLAST (Basic Local Alignment Search Tool)\n\nDNAの塩基配列あるいはタンパク質のアミノ酸配列のアライメントを行うためのアルゴリズム\n\n\nある閾値以上のスコアで類似する配列を発見することができる。"
  },
  {
    "objectID": "minicong/minicong.html#実際にやってみよう-前準備",
    "href": "minicong/minicong.html#実際にやってみよう-前準備",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "実際にやってみよう: 前準備",
    "text": "実際にやってみよう: 前準備\n\nhomebrewのインストール:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n\nsudo apt update\nsudo apt install install build-essential curl file git\n\necho 'export PATH=\"/home/linuxbrew/.linuxbrew/bin:$PATH\"' &gt;&gt; ~/.bash_profile\nsource ~/.bash_profile\nblastのインストール:\nbrew update\nbrew install blast\n今回使うリポジトリを取ってくる:\ngit clone https://github.com/ymat2/minicong.git"
  },
  {
    "objectID": "minicong/minicong.html#実際にやってみよう",
    "href": "minicong/minicong.html#実際にやってみよう",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "実際にやってみよう:",
    "text": "実際にやってみよう:\n\nminicongに移動\ncd minicong\nイヌとディンゴの配列を取得\nsh src/get_sequence.sh\nblastpを実行 (1行ずつやってみてもいいよ)\nsh src/run_blastp.sh\n結果を確認してみる。\nls result\nless result/Canis_lupus_dingo.ASM325472v1.blastp"
  },
  {
    "objectID": "minicong/minicong.html#アミラーゼ遺伝子の数は-イヌ-ディンゴ",
    "href": "minicong/minicong.html#アミラーゼ遺伝子の数は-イヌ-ディンゴ",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "アミラーゼ遺伝子の数は イヌ > ディンゴ",
    "text": "アミラーゼ遺伝子の数は イヌ &gt; ディンゴ\nヒトと共に生活し始めたことで雑食性に変化したこととの関与が示唆されている。\n\nSee also &gt; イヌの多様化における遺伝的背景（かずさDNA研究所）"
  },
  {
    "objectID": "minicong/minicong.html#バイオインフォマティクスは生物学における強力な研究手法",
    "href": "minicong/minicong.html#バイオインフォマティクスは生物学における強力な研究手法",
    "title": "Minimal hands-on for Comparative Genomics",
    "section": "バイオインフォマティクスは生物学における強力な研究手法",
    "text": "バイオインフォマティクスは生物学における強力な研究手法\nゲノムを読む技術の発達に伴い、日々多くの種のゲノムが解読されている。バイオインフォマティクスは、蓄積されつつある大規模な情報を扱い多様な生命現象を解き明かす強力なツールである。\n\n\n\n\n\n\nSEE MORE &gt;\n\n東北大学 生命科学研究科 進化ゲノミクス分野"
  },
  {
    "objectID": "local/test.html#マークダウン記法のテスト用",
    "href": "local/test.html#マークダウン記法のテスト用",
    "title": "Test slides",
    "section": "マークダウン記法のテスト用",
    "text": "マークダウン記法のテスト用\n\nマークダウン記法の見え方はこんな感じ\n\n太字\n斜体+太字\n斜体\n打ち消し\n\n引用\n\n\nここは引用\n\n\nインラインコードはprint()こんな感じ。\nリンク: Google\n\n\n\n\n左揃え\n中央揃え\n右揃え\n\n\n\n\n1\n2\n3\n\n\n4\n5\n6\n\n\n\n\n用語\n\n説明文１~~~~~\n\n\n説明文２~~~~~\n\n\n\nタスク1\nタスク2"
  },
  {
    "objectID": "local/test.html#code-r",
    "href": "local/test.html#code-r",
    "title": "Test slides",
    "section": "Code: R",
    "text": "Code: R\n\nggplot(mpg) +\n  aes(x=displ, y=cty, color=drv) +\n  geom_point() +\n  scale_color_viridis_d() +\n  theme_classic(base_size=18)"
  },
  {
    "objectID": "local/test.html#code-python",
    "href": "local/test.html#code-python",
    "title": "Test slides",
    "section": "Code: Python",
    "text": "Code: Python\n\nlst = [2, 6, 9]\n\ndef square(i):\n  return i * i\n\nlst2 = [square(i) for i in lst]\n\nfor j in lst2:\n  print(\"version: \" + str(j))\n\nversion: 4\nversion: 36\nversion: 81"
  },
  {
    "objectID": "local/test.html#multiple-columns",
    "href": "local/test.html#multiple-columns",
    "title": "Test slides",
    "section": "Multiple columns",
    "text": "Multiple columns\n\n\nこっちは4割幅\n\nhoge\nfuga\npiyo\n\n\nこっちは6割幅\n\nほげ\nふが\nぴよ"
  },
  {
    "objectID": "tech-circle/tech-circle-vol2.html#遺伝研スパコンで外部の解析ソフトウェアを使う方法",
    "href": "tech-circle/tech-circle-vol2.html#遺伝研スパコンで外部の解析ソフトウェアを使う方法",
    "title": "遺伝研スパコンで外部パッケージを使う",
    "section": "遺伝研スパコンで外部の解析ソフトウェアを使う方法",
    "text": "遺伝研スパコンで外部の解析ソフトウェアを使う方法\npaml, vcftools, blastなどを解析で使いたい。\n\n遺伝研スパコンでこれらの解析ソフトウェアを使うには:\n\nユーザーのhome/下にインストールして$PATHを通す。(めんどい。最終手段。)\nBioContainers Apptainer (Singularity) Imagesを使う。(手軽。)\n用意されているパッケージ管理ツールを使ってインストールする。(上手く使えば便利。)\n\nGuixの使い方を紹介\nSpackってのも使えるらしい"
  },
  {
    "objectID": "tech-circle/tech-circle-vol2.html#ユーザーのhome下にインストールしてpathを通す",
    "href": "tech-circle/tech-circle-vol2.html#ユーザーのhome下にインストールしてpathを通す",
    "title": "遺伝研スパコンで外部パッケージを使う",
    "section": "ユーザーのhome/下にインストールして$PATHを通す",
    "text": "ユーザーのhome/下にインストールして$PATHを通す\n例えばorthofinderを使いたいとき:\nmkdir ~/bin/  # パッケージを入れる用のディレクトリを準備\ncd bin\n\nwget https://github.com/davidemms/OrthoFinder/releases/download/2.5.4/OrthoFinder.tar.gz  # ソフトウェアをダウンロード\ntar xzf OrthoFinder.tar.gz  # 解凍\n./OrthoFinder/orthofinder -h  # テスト\nここまでできたら~/.bashrcに$PATHを通す\n\n\n.bashrc\n\nexport PATH=$PATH:${HOME}/bin/OrthoFinder/\n\n かなりめんどくさい。できればやりたくない。"
  },
  {
    "objectID": "tech-circle/tech-circle-vol2.html#biocontainers-apptainer-singularity-imagesを使う",
    "href": "tech-circle/tech-circle-vol2.html#biocontainers-apptainer-singularity-imagesを使う",
    "title": "遺伝研スパコンで外部パッケージを使う",
    "section": "BioContainers Apptainer (Singularity) Imagesを使う",
    "text": "BioContainers Apptainer (Singularity) Imagesを使う\nバイオインフォでよく使われる解析ソフトウェアが用意されている。\nls /usr/local/biotools/   # ツールの頭文字ごとに各ディレクトリにある\n 例えばorthofinderを使いたいとき:\nls /usr/local/biotools/o/orthofinder*   # 使えるバージョンを探す\n# ...\n# /usr/local/biotools/o/orthofinder:2.4.1--1  /usr/local/biotools/o/orthofinder:2.5.2--hdfd78af_1\n# /usr/local/biotools/o/orthofinder:2.5.1--0  /usr/local/biotools/o/orthofinder:2.5.3--hdfd78af_0\n# /usr/local/biotools/o/orthofinder:2.5.2--0  /usr/local/biotools/o/orthofinder:2.5.4--hdfd78af_0\nバージョンのパスを指定してコマンドを実行:\nmodule load singularity  # Apptainerを使えるようにする。\nsingularity exec /usr/local/biotools/o/orthofinder:2.5.2--0 orthofinder -f sample/"
  },
  {
    "objectID": "tech-circle/tech-circle-vol2.html#パッケージ管理ツールを使ってインストールする",
    "href": "tech-circle/tech-circle-vol2.html#パッケージ管理ツールを使ってインストールする",
    "title": "遺伝研スパコンで外部パッケージを使う",
    "section": "パッケージ管理ツールを使ってインストールする",
    "text": "パッケージ管理ツールを使ってインストールする\n\nパッケージ管理ツール?\n\napt, homebrewのように、ソフトウェアのインストール、バージョン管理を行えるツール。PATHも通るのでインストールしたらすぐ使える。\n\n遺伝研でもいくつかのパッケージ管理ツールが利用可能"
  },
  {
    "objectID": "tech-circle/tech-circle-vol2.html#デフォルトユーザー権限で使えるguix",
    "href": "tech-circle/tech-circle-vol2.html#デフォルトユーザー権限で使えるguix",
    "title": "遺伝研スパコンで外部パッケージを使う",
    "section": "デフォルト、ユーザー権限で使えるGuix",
    "text": "デフォルト、ユーザー権限で使えるGuix\n遺伝研が書いてる使い方ページ: https://sc.ddbj.nig.ac.jp/software/guix\n前準備:\n\n\n.bashrc\n\nexport GUIX_DAEMON_SOCKET=guix://at111\nexport GUIX_PROFILE=\"$HOME/.guix-profile\"\nsource \"$GUIX_PROFILE/etc/profile\"\n\nパッケージ検索:\nguix serach paml\nインストール:\nguix install paml\n デフォルトのインストールパスは~/.guix_profile/bin/"
  },
  {
    "objectID": "tech-circle/tech-circle-vol2.html#まとめ",
    "href": "tech-circle/tech-circle-vol2.html#まとめ",
    "title": "遺伝研スパコンで外部パッケージを使う",
    "section": "まとめ",
    "text": "まとめ\n外部の解析ソフトウェアを遺伝研で使いたいとき:\n\nApptainer Imagesにあるかどうか探す。\n↓\nGuixで探してインストールする。\n↓\nそれでもなければ公式から落としてきてパスを通す。"
  },
  {
    "objectID": "tech-circle/tech-circle-vol1.html#smallでfriendlyなテキストエディタ-nano",
    "href": "tech-circle/tech-circle-vol1.html#smallでfriendlyなテキストエディタ-nano",
    "title": "GNU nanoエディタを便利に使う",
    "section": "smallでfriendlyなテキストエディタ nano",
    "text": "smallでfriendlyなテキストエディタ nano\nGNUnanoはMacにもLinuxにも元から入っているテキストエディタ。ただしmacOS 12.3 Monterey以降、Macでnanoを打って起動するのはpicoなので、新しいのをhomebrewで入れる。\n\n公式ドキュメント: nano-editor.org/dist/latest/nano.html\nこちらもよろしくお願いします: ymat2.github.io/commandline/nano/\n\n\n新しいバージョンを入れて使うのもよい:\n## Macならhomebrewでインストール\nbrew install nano\n\n## Linux(Ubuntu)ならaptでインストール\nsudo apt install nano"
  },
  {
    "objectID": "tech-circle/tech-circle-vol1.html#基本的な使い方",
    "href": "tech-circle/tech-circle-vol1.html#基本的な使い方",
    "title": "GNU nanoエディタを便利に使う",
    "section": "基本的な使い方",
    "text": "基本的な使い方\nファイル名を指定して開く。ファイルが存在しない場合は新しく作られる。\nnano sample.md\n\nControlX\n\n編集画面から出る。内容を変更している場合は上書きするかどうか聞かれる。\n\nControlO\n\n編集内容を反映。上書き保存のイメージ。\n\nControlK\n\n選択範囲を切り取る。範囲を選択していない場合カーソルのある行が切り取られる。\n\nControlU\n\n切り取った内容をカーソル位置に張り付ける。"
  },
  {
    "objectID": "tech-circle/tech-circle-vol1.html#nanoを便利に使う1-configuration",
    "href": "tech-circle/tech-circle-vol1.html#nanoを便利に使う1-configuration",
    "title": "GNU nanoエディタを便利に使う",
    "section": "nanoを便利に使う1: Configuration",
    "text": "nanoを便利に使う1: Configuration\n~/.bash_profileみたいに、nanoも設定をファイルに書いておくことができる。\n読み込まれる順番は、以下の通り。\n\n/etc/nanorc # システムのデフォルト\n~/.nanorc # これが一番楽\n~/.config/nano/nanorc # 遺伝研のnanoは古すぎてこれは読んでくれない\n\n\nホームに.nanorcを作ってみる:\ncd  # homeディレクトリに移動\nnano .nanorc  # .nanorcをnanoで編集"
  },
  {
    "objectID": "tech-circle/tech-circle-vol1.html#nanoを便利に使う1-configuration-1",
    "href": "tech-circle/tech-circle-vol1.html#nanoを便利に使う1-configuration-1",
    "title": "GNU nanoエディタを便利に使う",
    "section": "nanoを便利に使う1: Configuration",
    "text": "nanoを便利に使う1: Configuration\nset &lt;option&gt;という書き方で設定をどんどん追加していく。\nよく使う & 便利そうな設定を抜粋:\n\n\n.nanorc\n\nset tabsize 4     # Tabでインデントするときの幅をspace4個分に。\nset autoindent    # 改行時にインデントを揃える\nset smooth        # スクロールがスムーズに\nset linenumbers   # 行番号を表示する\nset mouse         # カーソル移動や範囲選択でマウスを使えるように\n\nその他のオプションは公式ドキュメントを参照。"
  },
  {
    "objectID": "tech-circle/tech-circle-vol1.html#nanoを便利に使う2-シンタクスハイライト",
    "href": "tech-circle/tech-circle-vol1.html#nanoを便利に使う2-シンタクスハイライト",
    "title": "GNU nanoエディタを便利に使う",
    "section": "nanoを便利に使う2: シンタクスハイライト",
    "text": "nanoを便利に使う2: シンタクスハイライト\n\nシンタクスハイライトとは\n\n関数、文字列、予約語とかに色をつけてコードを見やすくするあれ。\n\n\n\n\n\n(/etc/nanorcの設定にもよるが、)Macのデフォルトのnanoはハイライトされていない…\nそれも.nanorcで設定できます!!"
  },
  {
    "objectID": "tech-circle/tech-circle-vol1.html#nanoを便利に使う2-シンタクスハイライト-1",
    "href": "tech-circle/tech-circle-vol1.html#nanoを便利に使う2-シンタクスハイライト-1",
    "title": "GNU nanoエディタを便利に使う",
    "section": "nanoを便利に使う2: シンタクスハイライト",
    "text": "nanoを便利に使う2: シンタクスハイライト\n\nハイライト定義ファイルが置かれている場所を探す。\n\nMac(homebrew): /usr/local/share/nano/ / /usr/local/Cellar/nano/%v/share/nano/\nLinux: /usr/share/nano/\n\n.nanorcに以下を追記:\n\n\n.nanorc\n\ninclude \"/usr/share/nano/*.nanorc\"\n\n適当なスクリプトをnanoで開いて、ハイライトされているか見てみる。"
  },
  {
    "objectID": "tech-circle/tech-circle-vol1.html#みなさんのおすすめエディタも教えてください",
    "href": "tech-circle/tech-circle-vol1.html#みなさんのおすすめエディタも教えてください",
    "title": "GNU nanoエディタを便利に使う",
    "section": "みなさんのおすすめエディタも教えてください!!",
    "text": "みなさんのおすすめエディタも教えてください!!\n\n私はnanoの設定こうしています！\nvimの方がはるかに高機能だというのを教えてあげよう\n何言ってんの、時代はvscodeでしょ\n\n個人的にvscodeを食わず嫌いしているのでぜひ誰かにやってほしい…\n\netc.\n\n\n\n技術輪読会のネタについて\n皆さんの意向をお聞きした上で、希望者が多ければgitを学ぶ回をやりたい。"
  },
  {
    "objectID": "tech-circle/tech-circle-vol1.html#補遺-遺伝研でnanoを使うとき",
    "href": "tech-circle/tech-circle-vol1.html#補遺-遺伝研でnanoを使うとき",
    "title": "GNU nanoエディタを便利に使う",
    "section": "補遺: 遺伝研でnanoを使うとき",
    "text": "補遺: 遺伝研でnanoを使うとき\n遺伝研のデフォルトのnanoは、version 2.3.1とかなり古い。(2023-05-09)\n\nキーバインドが結構違う。(ControlXとか基本的なやつは同じ。)\n~/.config/nano/nanorcを読んでくれない。\n.nanorcのワイルドカード*が効かない。\n\n\nデフォルトのnanoを使う場合、\n\n設定ファイルは~/.nanorc\n\n\nキーバインドは自分で設定したり、野生のやつを借りたり。\n\n\nシンタックスハイライトは1つ1つ直接指定: include \"usr/share/nano/python.nanorc\"\n\nおすすめは新しいnanoを入れること\n\nguixならversion 5.6.1が入る。(これもそこそこ古いけど。)\n\n\n*.nanorcもついてくる。(~/.guix-profile/share/nano/*.nanorc)\n\n\n公式から最新版(version 7.2)を落としてきてもいいかも。"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#目次",
    "href": "git-circle/git-circle-vol1.html#目次",
    "title": "Git 基本操作②",
    "section": "目次",
    "text": "目次\n\n前回の復習\nローカルリポジトリの変更を手元に反映させる\nあえて競合を起こしてそれを解決してみる\n\n\n参考\n\n過去の牧野研での git 講習資料\n\n\ngit 公式リファレンス"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#前回の復習-git-を使い始める",
    "href": "git-circle/git-circle-vol1.html#前回の復習-git-を使い始める",
    "title": "Git 基本操作②",
    "section": "前回の復習: git を使い始める",
    "text": "前回の復習: git を使い始める\n\ngit  をインストールする。\nGithub  に個人アカウントをつくる。\nGitの初期設定をする: ~/.gitconfig\nSSHの設定をする: ~/.ssh/"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#前回の復習-手元のプロジェクトをgitで管理する",
    "href": "git-circle/git-circle-vol1.html#前回の復習-手元のプロジェクトをgitで管理する",
    "title": "Git 基本操作②",
    "section": "前回の復習: 手元のプロジェクトをGitで管理する",
    "text": "前回の復習: 手元のプロジェクトをGitで管理する\n\n適当なディレクトリを作ってテキストファイルを新規作成する:\nmkdir new_project && cd new_project\necho \"Hello, world!\" &gt; sample.md\nローカルリポジトリをつくる:\ngit init\nローカルリポジトリに sample.md をコミットする。\n最初は git status や git log で頻繁に確認すると安心。\ngit status\ngit add sample.md  # sample.mdをindexに登録\ngit status\ngit commit -m \"Create sample.md\" # コミットメッセージを添えてコミット\ngit status"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#前回の復習-手元のプロジェクトをgithubでも管理する",
    "href": "git-circle/git-circle-vol1.html#前回の復習-手元のプロジェクトをgithubでも管理する",
    "title": "Git 基本操作②",
    "section": "前回の復習: 手元のプロジェクトをGithubでも管理する",
    "text": "前回の復習: 手元のプロジェクトをGithubでも管理する\n\nGitHubアカウントページの右上の “+” から “New repository” を選択する。\n適当なリポジトリ名（基本は手元と同じ）をつけて “Create repository” を押す。\n手順が表示されるので基本的にそれに従う:\ngit remote add origin https://github.com/USER_NAME/new_project.git  # リモートリポジトリを紐づける\ngit remote -v # ちゃんと紐づいたか確認\ngit status\ngit push -u origin main # リモートにpush\ngit status\nリポジトリのページを更新してsample.mdが見えるか確認する。"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#前回の復習-すでにあるリポジトリを手元に落としてくる",
    "href": "git-circle/git-circle-vol1.html#前回の復習-すでにあるリポジトリを手元に落としてくる",
    "title": "Git 基本操作②",
    "section": "前回の復習: すでにあるリポジトリを手元に落としてくる",
    "text": "前回の復習: すでにあるリポジトリを手元に落としてくる\n\nGitHub上の適当なリポジトリをひとつ選ぶ。 (e.g., https://github.com/ymat2/practice_git)\n右の方の &lt;&gt;Code▼ ボタンを押す。\nSSHではなくHTTPSを選択し、URLをコピー。\ngit clone https://github.com/ymat2/practice-git.git\n中身を眺めてみる:\ncd practice-git\nls -al\ngit log\n\n\n\nclone はどんな時に使う?\n\n他人の作ったソフトウェアをインストールして使うとき\n\n\n新しいPCで作業をするとき\n\n\netc."
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#リモートの変更を手元に取り寄せる",
    "href": "git-circle/git-circle-vol1.html#リモートの変更を手元に取り寄せる",
    "title": "Git 基本操作②",
    "section": "リモートの変更を手元に取り寄せる",
    "text": "リモートの変更を手元に取り寄せる\n複数人で同じリポジトリを使う場合や、個人でも複数のマシンで開発する場合など、別のひと/マシンが push した変更を手元に取り寄せるという操作が必要になる。\ngit fetch + git merge や git pull といったコマンドで、リモートの変更を手元に反映させる。"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#リモートの変更を手元に取り寄せる-1",
    "href": "git-circle/git-circle-vol1.html#リモートの変更を手元に取り寄せる-1",
    "title": "Git 基本操作②",
    "section": "リモートの変更を手元に取り寄せる",
    "text": "リモートの変更を手元に取り寄せる\n\ngit fetch\n\nリモートリポジトリの変更をローカルリポジトリに取り込む。\n\n\nこの時点では .git/ 内だけが変更されているため、手元のファイルはそのまま。\n\ngit merge\n\nローカルリポジトリの内容を、手元のファイルに反映する。\n\ngit pull\n\ngit fetch と git merge を一緒に実行するコマンド。"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#実際にやってみる",
    "href": "git-circle/git-circle-vol1.html#実際にやってみる",
    "title": "Git 基本操作②",
    "section": "実際にやってみる",
    "text": "実際にやってみる\n\nリモートでの変更を再現するために、Githubページ上で sample.md を編集する。\n\nsample.md をクリック -&gt; 右上のペンマーク 🖊 から編集画面に入る。\n“This line is edited online.” など適当に編集して、右上の Commit changes を押す。\n表示されるウィンドウはとりあえずそのままで Commit changes\n変更されていることを確認する。\n\nその変更をローカルリポジトリに取り寄せる:\ngit fetch\ngit status\n手元のファイルに反映する:\ngit merge\ngit status\n\n🔰 練習: もう一度リモートで編集して git pull してみる。"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#手元でもファイルを変更していたらどうなるの",
    "href": "git-circle/git-circle-vol1.html#手元でもファイルを変更していたらどうなるの",
    "title": "Git 基本操作②",
    "section": "手元でもファイルを変更していたらどうなるの??",
    "text": "手元でもファイルを変更していたらどうなるの??\n「別のファイルの変更」や「同じファイルの別の箇所の変更」である場合、git merge は両方の変更を取り入れる。\n\n\n手元の変更:\n## 第1章\n私はネコである。\n\n## 第2章\nあなたもネコである。\n↓\n## 第1章\n私はイヌである。\n\n## 第2章\nあなたもネコである。\n\nリモートの変更:\n## 第1章\n私はネコである。\n\n## 第2章\nあなたもネコである。\n↓\n## 第1章\n私はネコである。\n\n## 第2章\nあなたもイヌである。\n\n\n\n↓\ngit fetch + git merge\n↓\n\n## 第1章\n私はイヌである。\n\n## 第2章\nあなたもイヌである。"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#手元でもファイルを変更していたらどうなるの-1",
    "href": "git-circle/git-circle-vol1.html#手元でもファイルを変更していたらどうなるの-1",
    "title": "Git 基本操作②",
    "section": "手元でもファイルを変更していたらどうなるの??",
    "text": "手元でもファイルを変更していたらどうなるの??\n「同じファイルの同じ箇所の変更」である場合、conflict が発生する。\n\n\n手元の変更:\n## 第1章\n私はネコである。\n\n## 第2章\nあなたもネコである。\n↓\n## 第1章\n私はイヌである。\n\n## 第2章\nあなたもネコである。\n\nリモートの変更:\n## 第1章\n私はネコである。\n\n## 第2章\nあなたもネコである。\n↓\n## 第1章\n私はサルである。\n\n## 第2章\nあなたもネコである。\n\n\n\n↓\ngit fetch + git merge\n↓\n\n$ git merge\n# Auto-merging sample.md\n# CONFLICT (content): Merge conflict in sample.md\n# Automatic merge failed; fix conflicts and then commit the result."
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#conflictを解消する",
    "href": "git-circle/git-circle-vol1.html#conflictを解消する",
    "title": "Git 基本操作②",
    "section": "conflictを解消する",
    "text": "conflictを解消する\nconflict が生じたファイル( sample.md )を開いてみるとこんな風になっている。\n## 第1章\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n私はイヌである。\n=======\n私はサルである。\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; refs/remotes/origin/main\n\n## 第2章\nあなたもネコである。\n\n======= を挟んで、\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD は手元での変更\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; refs/remotes/origin/main はリモートからの変更\n\nを示している。"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#conflictを解消する-1",
    "href": "git-circle/git-circle-vol1.html#conflictを解消する-1",
    "title": "Git 基本操作②",
    "section": "conflictを解消する",
    "text": "conflictを解消する\nファイルを編集して conflict を解消する。例えば:\n## 第1章\n私はイヌであるし、サルでもある。\n\n## 第2章\nあなたもネコである。\n\nこの変更をコミットしてリモートにも反映する:\ngit add sample.md\ngit commit -m \"Solve a conflict\"\ngit push"
  },
  {
    "objectID": "git-circle/git-circle-vol1.html#とにかく使ってみる",
    "href": "git-circle/git-circle-vol1.html#とにかく使ってみる",
    "title": "Git 基本操作②",
    "section": "とにかく使ってみる",
    "text": "とにかく使ってみる\n🔰 練習1: 先ほどつくった sample.md を編集して複数行の内容にする。できたらコミットしてプッシュ。\n\n🔰 練習2: 手元とリモートで異なる行を編集する。git fetch してから git merge してみる。\n\n手元: 編集したらコミット\nリモート: 編集したらCommit changes\n\n\n🔰 練習3: 手元とリモートで同じ行に異なる編集をする。\n\nまずは手元ではコミットせずに git fetch してから git merge してみる。どんなメッセージが出る？"
  }
]